{"ast":null,"code":"var _jsxFileName = \"/home/prasurjya/Github/planner/src/Components/AnalogClock.js\";\nimport React, { Component } from 'react';\nimport './AnalogClock.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AnalogClock extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      time: new Date().toLocaleString()\n    };\n    this.radius = this.props.size / 2;\n    this.drawingContext = null;\n    this.draw24hour = this.props.timeFormat.toLowerCase().trim() === \"24hour\";\n    this.drawRoman = !this.draw24hour && this.props.hourFormat.toLowerCase().trim() === \"roman\";\n  }\n\n  componentDidMount() {\n    this.getDrawingContext();\n    this.timerId = setInterval(() => this.tick(), 1000);\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.timerId);\n  }\n\n  getDrawingContext() {\n    this.drawingContext = this.refs.clockCanvas.getContext('2d');\n    this.drawingContext.translate(this.radius, this.radius);\n    this.radius *= 0.9;\n  }\n\n  tick() {\n    this.setState({\n      time: new Date()\n    });\n    const radius = this.radius;\n    let ctx = this.drawingContext;\n    this.drawFace(ctx, radius);\n    this.drawNumbers(ctx, radius);\n    this.drawTicks(ctx, radius);\n    this.drawTime(ctx, radius);\n  }\n\n  drawFace(ctx, radius) {\n    ctx.beginPath();\n    ctx.arc(0, 0, radius, 0, 2 * Math.PI);\n    ctx.fillStyle = \"#5d6675\";\n    ctx.fill();\n    const grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);\n    grad.addColorStop(0, \"white\");\n    grad.addColorStop(0.5, \"white\");\n    grad.addColorStop(1, \"white\");\n    ctx.strokeStyle = grad;\n    ctx.lineWidth = radius * 0.01;\n    ctx.stroke();\n    ctx.beginPath();\n    ctx.arc(0, 0, radius * 0.05, 0, 2 * Math.PI);\n    ctx.fillStyle = \"#333\";\n    ctx.fill();\n  }\n\n  drawNumbers(ctx, radius) {\n    const romans = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\"];\n    const fontBig = radius * 0.15 + \"px Arial\";\n    const fontSmall = radius * 0.075 + \"px Arial\";\n    let ang, num;\n    ctx.textBaseline = \"middle\";\n    ctx.textAlign = \"center\";\n\n    for (num = 1; num < 13; num++) {\n      ang = num * Math.PI / 6;\n      ctx.rotate(ang);\n      ctx.translate(0, -radius * 0.78);\n      ctx.rotate(-ang);\n      ctx.font = fontBig;\n      ctx.fillStyle = \"black\";\n      ctx.fillText(this.drawRoman ? romans[num - 1] : num.toString(), 0, 0);\n      ctx.rotate(ang);\n      ctx.translate(0, radius * 0.78);\n      ctx.rotate(-ang); // Draw inner numerals for 24 hour time format\n\n      if (this.draw24hour) {\n        ctx.rotate(ang);\n        ctx.translate(0, -radius * 0.60);\n        ctx.rotate(-ang);\n        ctx.font = fontSmall;\n        ctx.fillStyle = \"white\";\n        ctx.fillText((num + 12).toString(), 0, 0);\n        ctx.rotate(ang);\n        ctx.translate(0, radius * 0.60);\n        ctx.rotate(-ang);\n      }\n    } // Write author text\n    //    ctx.font = fontSmall;\n    //    ctx.fillStyle = \"#3D3B3D\";\n    //    ctx.translate(0, radius * 0.30);\n    //    ctx.fillText(\"\", 0, 0);\n    //    ctx.translate(0, -radius * 0.30);\n\n  }\n\n  drawTicks(ctx, radius) {\n    let numTicks, tickAng, tickX, tickY;\n\n    for (numTicks = 0; numTicks < 60; numTicks++) {\n      tickAng = numTicks * Math.PI / 30;\n      tickX = radius * Math.sin(tickAng);\n      tickY = -radius * Math.cos(tickAng);\n      ctx.beginPath();\n      ctx.lineWidth = radius * 0.010;\n      ctx.moveTo(tickX, tickY);\n\n      if (numTicks % 5 === 0) {\n        ctx.lineTo(tickX * 0.88, tickY * 0.88);\n      } else {\n        ctx.lineTo(tickX * 0.92, tickY * 0.92);\n      }\n\n      ctx.stroke();\n    }\n  }\n\n  drawTime(ctx, radius) {\n    const now = this.state.time;\n    let hour = now.getHours();\n    let minute = now.getMinutes();\n    let second = now.getSeconds(); // hour\n\n    hour %= 12;\n    hour = hour * Math.PI / 6 + minute * Math.PI / (6 * 60) + second * Math.PI / (360 * 60);\n    this.drawHand(ctx, hour, radius * 0.5, radius * 0.05); // minute\n\n    minute = minute * Math.PI / 30 + second * Math.PI / (30 * 60);\n    this.drawHand(ctx, minute, radius * 0.8, radius * 0.05); // second\n\n    second = second * Math.PI / 30;\n    this.drawHand(ctx, second, radius * 0.9, radius * 0.02, \"white\");\n  }\n\n  drawHand(ctx, position, length, width, color) {\n    color = color || \"black\";\n    ctx.beginPath();\n    ctx.lineWidth = width;\n    ctx.lineCap = \"round\";\n    ctx.fillStyle = color;\n    ctx.strokeStyle = color;\n    ctx.moveTo(0, 0);\n    ctx.rotate(position);\n    ctx.lineTo(0, -length);\n    ctx.stroke();\n    ctx.rotate(-position);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"AnalogClock\",\n      style: {\n        width: String(this.props.size) + 'px'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"canvas\", {\n        width: this.props.size,\n        height: this.props.size,\n        ref: \"clockCanvas\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 14\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this);\n  }\n\n}\n\nAnalogClock.defaultProps = {\n  size: 400,\n  // size in pixels => size is length & width\n  timeFormat: \"24hour\",\n  // {standard | 24hour} => if '24hour', hourFormat must be 'standard'\n  hourFormat: \"standard\" // {standard | roman}\n\n};\nexport default AnalogClock;","map":{"version":3,"sources":["/home/prasurjya/Github/planner/src/Components/AnalogClock.js"],"names":["React","Component","AnalogClock","constructor","props","state","time","Date","toLocaleString","radius","size","drawingContext","draw24hour","timeFormat","toLowerCase","trim","drawRoman","hourFormat","componentDidMount","getDrawingContext","timerId","setInterval","tick","componentWillUnmount","clearInterval","refs","clockCanvas","getContext","translate","setState","ctx","drawFace","drawNumbers","drawTicks","drawTime","beginPath","arc","Math","PI","fillStyle","fill","grad","createRadialGradient","addColorStop","strokeStyle","lineWidth","stroke","romans","fontBig","fontSmall","ang","num","textBaseline","textAlign","rotate","font","fillText","toString","numTicks","tickAng","tickX","tickY","sin","cos","moveTo","lineTo","now","hour","getHours","minute","getMinutes","second","getSeconds","drawHand","position","length","width","color","lineCap","render","String","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport './AnalogClock.css'\n\nclass AnalogClock extends Component {\n    constructor(props) {\n       super(props);\n \n       this.state = { time: new Date().toLocaleString() };\n       this.radius = this.props.size / 2;\n       this.drawingContext = null;\n       this.draw24hour = this.props.timeFormat.toLowerCase().trim() === \"24hour\";\n       this.drawRoman = !this.draw24hour && this.props.hourFormat.toLowerCase().trim() === \"roman\";\n \n    }\n \n    componentDidMount() {\n       this.getDrawingContext();\n       this.timerId = setInterval(() => this.tick(), 1000);\n    }\n \n    componentWillUnmount() {\n       clearInterval(this.timerId);\n    }\n \n    getDrawingContext() {\n       this.drawingContext = this.refs.clockCanvas.getContext('2d');\n       this.drawingContext.translate(this.radius, this.radius);\n       this.radius *= 0.9;\n    }\n \n    tick() {\n       this.setState({ time: new Date() });\n       const radius = this.radius;\n       let ctx = this.drawingContext;\n       this.drawFace(ctx, radius);\n       this.drawNumbers(ctx, radius);\n       this.drawTicks(ctx, radius);\n       this.drawTime(ctx, radius);\n    }\n \n    drawFace(ctx, radius) {\n       ctx.beginPath();\n       ctx.arc(0,0, radius, 0, 2 * Math.PI);\n       ctx.fillStyle = \"#5d6675\";\n       ctx.fill();\n \n       const grad = ctx.createRadialGradient(0, 0, radius * 0.95, 0, 0, radius * 1.05);\n       grad.addColorStop(0, \"white\");\n       grad.addColorStop(0.5, \"white\");\n       grad.addColorStop(1, \"white\");\n       ctx.strokeStyle = grad;\n       ctx.lineWidth = radius * 0.01;\n       ctx.stroke();\n \n       ctx.beginPath();\n       ctx.arc(0, 0, radius * 0.05, 0, 2 * Math.PI);\n       ctx.fillStyle = \"#333\";\n       ctx.fill();\n    }\n \n    drawNumbers(ctx, radius) {\n       const romans = [\"I\", \"II\", \"III\", \"IV\", \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\"];\n       const fontBig = radius * 0.15 + \"px Arial\";\n       const fontSmall = radius * 0.075 + \"px Arial\";\n       let ang, num;\n \n       ctx.textBaseline = \"middle\";\n       ctx.textAlign = \"center\";\n       for (num = 1; num < 13; num++) {\n          ang = num * Math.PI / 6;\n          ctx.rotate(ang);\n          ctx.translate(0, -radius * 0.78);\n          ctx.rotate(-ang);\n          ctx.font = fontBig;\n          ctx.fillStyle = \"black\";\n          ctx.fillText(this.drawRoman ? romans[num-1] : num.toString(), 0, 0);\n          ctx.rotate(ang);\n          ctx.translate(0, radius * 0.78);\n          ctx.rotate(-ang);\n \n          // Draw inner numerals for 24 hour time format\n          if (this.draw24hour) {\n             ctx.rotate(ang);\n             ctx.translate(0, -radius * 0.60);\n             ctx.rotate(-ang);\n             ctx.font = fontSmall;\n             ctx.fillStyle = \"white\";\n             ctx.fillText((num + 12).toString(), 0, 0);\n             ctx.rotate(ang);\n             ctx.translate(0, radius * 0.60);\n             ctx.rotate(-ang);\n          }\n       }\n \n       // Write author text\n    //    ctx.font = fontSmall;\n    //    ctx.fillStyle = \"#3D3B3D\";\n    //    ctx.translate(0, radius * 0.30);\n    //    ctx.fillText(\"\", 0, 0);\n    //    ctx.translate(0, -radius * 0.30);\n    }\n \n    drawTicks(ctx, radius) {\n       let numTicks, tickAng, tickX, tickY;\n \n       for (numTicks = 0; numTicks < 60; numTicks++) {\n \n          tickAng = (numTicks * Math.PI / 30);\n          tickX = radius * Math.sin(tickAng);\n          tickY = -radius * Math.cos(tickAng);\n \n          ctx.beginPath();\n          ctx.lineWidth = radius * 0.010;\n          ctx.moveTo(tickX, tickY);\n          if (numTicks % 5 === 0) {\n             ctx.lineTo(tickX * 0.88, tickY * 0.88);\n          } else {\n             ctx.lineTo(tickX * 0.92, tickY * 0.92);\n          }\n          ctx.stroke();\n       }\n    }\n \n    drawTime(ctx, radius) {\n       const now = this.state.time;\n       let hour = now.getHours();\n       let minute = now.getMinutes();\n       let second = now.getSeconds();\n \n       // hour\n       hour %= 12;\n       hour = (hour * Math.PI / 6) + (minute * Math.PI / (6 * 60)) + (second * Math.PI / (360 * 60));\n       this.drawHand(ctx, hour, radius * 0.5, radius * 0.05);\n       // minute\n       minute = (minute * Math.PI / 30) + (second * Math.PI / (30 * 60));\n       this.drawHand(ctx, minute, radius * 0.8, radius * 0.05);\n       // second\n       second = (second * Math.PI / 30);\n       this.drawHand(ctx, second, radius * 0.9, radius * 0.02, \"white\");\n    }\n \n    drawHand(ctx, position, length, width, color) {\n       color = color || \"black\";\n       ctx.beginPath();\n       ctx.lineWidth = width;\n       ctx.lineCap = \"round\";\n       ctx.fillStyle = color;\n       ctx.strokeStyle = color;\n       ctx.moveTo(0, 0);\n       ctx.rotate(position);\n       ctx.lineTo(0, -length);\n       ctx.stroke();\n       ctx.rotate(-position);\n    }\n \n    render() {\n       return (\n          <div className=\"AnalogClock\" style={{ width: String(this.props.size) + 'px' }}>\n             <canvas width={this.props.size} height={this.props.size} ref=\"clockCanvas\"/>\n          </div>\n       );\n    }\n }\n \n AnalogClock.defaultProps = {\n       size: 400, // size in pixels => size is length & width\n       timeFormat: \"24hour\", // {standard | 24hour} => if '24hour', hourFormat must be 'standard'\n       hourFormat: \"standard\" // {standard | roman}\n };\n\n export default AnalogClock"]},"metadata":{},"sourceType":"module"}